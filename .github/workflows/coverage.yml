name: Coverage Analysis & Reporting

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: '6.0'
        mongodb-replica-set: test-rs
        mongodb-port: 27017
        
    - name: 📦 Install Dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: 🌱 Seed Database
      working-directory: ./backend
      run: npm run seed
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: 📊 Generate Comprehensive Coverage
      working-directory: ./backend
      run: |
        npm run test:coverage
        npm run test:unit -- --coverage
        npm run test:api -- --coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: 📈 Coverage Summary
      working-directory: ./backend
      run: |
        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/lcov-report/index.html ]; then
          echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Extract coverage percentages if available
        if [ -f coverage/coverage-summary.json ]; then
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🏷️ Coverage Badge Data
      working-directory: ./backend
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          
          echo "Lines: ${LINES_PCT}%" >> coverage-summary.txt
          echo "Functions: ${FUNCTIONS_PCT}%" >> coverage-summary.txt
          echo "Branches: ${BRANCHES_PCT}%" >> coverage-summary.txt  
          echo "Statements: ${STATEMENTS_PCT}%" >> coverage-summary.txt
        fi
        
    - name: 📊 Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          backend/coverage/
          backend/coverage-summary.txt
        retention-days: 30
        
    - name: 📈 Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './backend/coverage-summary.txt';
          
          if (fs.existsSync(path)) {
            const coverage = fs.readFileSync(path, 'utf8');
            const body = `## 📊 Coverage Report
            
            ### Backend Test Coverage
            \`\`\`
            ${coverage}
            \`\`\`
            
            📋 Full coverage report is available in the build artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }