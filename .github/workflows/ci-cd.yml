name: CI/CD Pipeline - Food Ordering System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_ENV: test
  TEST_MONGODB_URI: mongodb://localhost:27017/food-ordering-test

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, api]
    
    services:
      mongodb:
        image: mongo:5.0
        options: >-
          --health-cmd "mongo --eval 'quit()'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd backend
        npm ci --prefer-offline --no-audit

    - name: 🔍 Wait for MongoDB
      run: |
        timeout 60 bash -c 'until mongosh --eval "quit()" &>/dev/null; do sleep 1; done' || echo "MongoDB ready check failed, continuing..."

    - name: 🧪 Run ${{ matrix.test-type }} tests
      env:
        PORT: ${{ matrix.test-type == 'api' && '5001' || '5000' }}
      run: |
        cd backend
        npm run test:${{ matrix.test-type }} -- --passWithNoTests --detectOpenHandles --forceExit
      continue-on-error: false

    - name: 📊 Generate coverage report
      if: matrix.test-type == 'unit'
      run: |
        cd backend
        npm run test:coverage -- --passWithNoTests --detectOpenHandles --forceExit
      continue-on-error: true

    - name: 📈 Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.node-version == '18.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend-unit
        name: backend-unit-tests
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: 📋 Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-node${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/jest-report.html
        retention-days: 30

  bdd-test:
    name: 🥒 BDD/Cucumber Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mongodb:
        image: mongo:5.0
        options: >-
          --health-cmd "mongo --eval 'quit()'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd backend
        npm ci --prefer-offline --no-audit

    - name: 🔍 Wait for MongoDB
      run: |
        timeout 60 bash -c 'until mongosh --eval "quit()" &>/dev/null; do sleep 1; done' || echo "MongoDB ready check failed, continuing..."

    - name: 🥒 Run BDD tests
      run: |
        cd backend
        npm run test:bdd
      continue-on-error: true

    - name: 📋 Archive BDD results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bdd-test-results
        path: |
          backend/cucumber-report.html
          backend/features/
        retention-days: 30

  ui-test:
    name: 🎭 UI Tests (Selenium)
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mongodb:
        image: mongo:5.0
        options: >-
          --health-cmd "mongo --eval 'quit()'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../frontend && npm ci --prefer-offline --no-audit

    - name: 🌐 Set up Chrome browser
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable

    - name: 🔍 Wait for MongoDB and seed data
      run: |
        timeout 60 bash -c 'until mongosh --eval "quit()" &>/dev/null; do sleep 1; done' || echo "MongoDB ready check failed, continuing..."
        cd backend
        npm run seed || echo "Seeding failed, continuing..."

    - name: 🚀 Start services
      env:
        MONGODB_URI: mongodb://localhost:27017/food-ordering-test
        PORT: 5000
        REACT_APP_API_URL: http://localhost:5000
      run: |
        cd backend
        npm start &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"
        
        # Wait for backend
        timeout 60 bash -c 'until curl -s http://localhost:5000/health || curl -s http://localhost:5000/ &>/dev/null; do sleep 2; done' || echo "Backend health check failed, continuing..."
        
        cd ../frontend
        npm run build
        npx serve -s build -l 3000 &
        FRONTEND_PID=$!
        echo "Frontend PID: $FRONTEND_PID"
        
        # Wait for frontend
        timeout 60 bash -c 'until curl -s http://localhost:3000/ &>/dev/null; do sleep 2; done' || echo "Frontend health check failed, continuing..."
        
        echo "Services started successfully"

    - name: 🎭 Run UI tests
      env:
        CHROME_BIN: /usr/bin/google-chrome
        DISPLAY: :99
        SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
      run: |
        # Start virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
        cd backend
        timeout 300 npm run test:ui || echo "UI tests completed with issues"
      continue-on-error: true

    - name: 📸 Upload UI test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-artifacts
        path: |
          backend/tests/ui/screenshots/
          backend/tests/ui/test-results/
          backend/ui-test-report.html
        retention-days: 30

  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../frontend && npm ci --prefer-offline --no-audit

    - name: 🔍 Run ESLint
      run: |
        cd backend
        npx eslint . --ext .js --format json --output-file eslint-report.json || echo "ESLint completed with issues"
        cd ../frontend
        npx eslint src/ --ext .js,.jsx --format json --output-file eslint-report.json || echo "ESLint completed with issues"
      continue-on-error: true

    - name: 🛡️ Security audit
      run: |
        cd backend && npm audit --audit-level=high --json > audit-backend.json || echo "Backend audit completed with issues"
        cd ../frontend && npm audit --audit-level=high --json > audit-frontend.json || echo "Frontend audit completed with issues"
      continue-on-error: true

    - name: 📋 Archive quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          backend/eslint-report.json
          frontend/eslint-report.json
          backend/audit-backend.json
          frontend/audit-frontend.json
        retention-days: 30

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: 📥 Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit --production=false
        cd ../frontend && npm ci --prefer-offline --no-audit

    - name: 🏗️ Build frontend
      env:
        REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.food-ordering.example.com' || 'https://staging-api.food-ordering.example.com' }}
        CI: false # Treat warnings as warnings, not errors
      run: |
        cd frontend
        npm run build

    - name: 📦 Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/
          !backend/node_modules/
          !backend/tests/
          !backend/coverage/
        retention-days: 30

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    services:
      mongodb:
        image: mongo:5.0
        options: >-
          --health-cmd "mongo --eval 'quit()'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: 📥 Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit

    - name: 🔗 Run integration tests
      env:
        MONGODB_URI: mongodb://localhost:27017/food-ordering-integration-test
        PORT: 5002
      run: |
        cd backend
        npm run test:all -- --passWithNoTests --detectOpenHandles --forceExit
      continue-on-error: true

    - name: 📋 Archive integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          backend/integration-test-results/
          backend/test-results.txt
        retention-days: 30

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, ui-test, bdd-test]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.food-ordering.example.com

    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment successful!"
        echo "🌐 Staging URL: https://staging.food-ordering.example.com"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, ui-test, bdd-test, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://food-ordering.example.com

    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "✅ Production deployment successful!"
        echo "🌐 Production URL: https://food-ordering.example.com"

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, ui-test, bdd-test, code-quality, build]
    if: always()

    steps:
    - name: 📢 Pipeline Status Notification
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit & API Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| UI Tests (Selenium) | ${{ needs.ui-test.result == 'success' && '✅ Passed' || needs.ui-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| BDD/Cucumber Tests | ${{ needs.bdd-test.result == 'success' && '✅ Passed' || needs.bdd-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "### ✅ Pipeline Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "All critical jobs completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Pipeline Status: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Some critical jobs failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY