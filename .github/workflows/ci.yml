name: CI/CD Pipeline - Food Ordering System

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'
  CI: true
  JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline-minimum-32-chars
  MONGODB_URI: mongodb://localhost:27017/test_food_ordering

jobs:
  backend-tests:
    name: Backend Tests and Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        npm ci
        npm ls
        
    - name: Seed Test Database
      working-directory: ./backend
      run: |
        echo "Seeding test database..."
        npm run seed
        echo "Database seed completed"
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: Run Unit Tests
      working-directory: ./backend
      run: |
        echo "Running unit tests..."
        npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: Run API Tests
      working-directory: ./backend
      run: |
        echo "Running API tests..."
        npm run test:api
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: Run BDD Tests
      working-directory: ./backend
      run: |
        echo "Running BDD tests..."
        npm run test:bdd
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: Generate Coverage Report
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test_food_ordering
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/test-results.txt
        retention-days: 30

  frontend-tests:
    name: Frontend Tests and Build  
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npm ls
        
    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true
        
    - name: Build Frontend Application
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/build/
        retention-days: 30

  security-analysis:
    name: Security and Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Backend Security Audit
      working-directory: ./backend
      run: |
        npm audit --audit-level=moderate || true
        npm audit fix --dry-run || true
      continue-on-error: true
      
    - name: Frontend Security Audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate || true
        npm audit fix --dry-run || true
      continue-on-error: true
      
    - name: Check Outdated Packages
      run: |
        echo "Backend outdated packages:"
        cd backend && npm outdated || true
        echo "Frontend outdated packages:"
        cd ../frontend && npm outdated || true

  integration-check:
    name: Integration and Deployment Check
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-analysis]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create Deployment Summary
      run: |
        echo "# CI/CD Pipeline Results" > PIPELINE_SUMMARY.md
        echo "" >> PIPELINE_SUMMARY.md
        echo "## Pipeline Status: SUCCESS" >> PIPELINE_SUMMARY.md
        echo "" >> PIPELINE_SUMMARY.md
        echo "### Test Results Summary:" >> PIPELINE_SUMMARY.md
        echo "- Backend Unit Tests: PASSED" >> PIPELINE_SUMMARY.md
        echo "- Backend API Tests: PASSED" >> PIPELINE_SUMMARY.md
        echo "- BDD/Cucumber Tests: PASSED" >> PIPELINE_SUMMARY.md
        echo "- Frontend Tests: PASSED" >> PIPELINE_SUMMARY.md
        echo "- Security Audit: COMPLETED" >> PIPELINE_SUMMARY.md
        echo "" >> PIPELINE_SUMMARY.md
        echo "### Build Status:" >> PIPELINE_SUMMARY.md
        echo "- Frontend Build: SUCCESS" >> PIPELINE_SUMMARY.md
        echo "- Code Coverage: Generated" >> PIPELINE_SUMMARY.md
        echo "" >> PIPELINE_SUMMARY.md
        echo "**Pipeline completed at:** $(date)" >> PIPELINE_SUMMARY.md
        
    - name: Upload Pipeline Summary
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-summary
        path: PIPELINE_SUMMARY.md
        retention-days: 90

  notify:
    name: Pipeline Notification
    runs-on: ubuntu-latest
    needs: [integration-check]
    if: always()
    
    steps:
    - name: Pipeline Success Notification
      if: success()
      run: |
        echo "CI/CD Pipeline completed successfully!"
        echo "All tests passed"
        echo "Build completed"
        echo "Security checks passed"
        echo "Ready for deployment"
        
    - name: Pipeline Failure Notification  
      if: failure()
      run: |
        echo "CI/CD Pipeline failed!"
        echo "Please check the logs and fix the issues"
        echo "Review failed jobs for details"